{"version":3,"sources":["webpack:///../twitch-ui/dist/hooks/useGridList.js","webpack:///../twitch-ui/dist/components/GridList/GridList.js","webpack:///../twitch-data/dist/queries/TopChannels.js","webpack:///../twitch-ui/dist/components/ChannelGrid/ChannelGrid.js","webpack:///../twitch-ui/dist/components/AllChannels/AllChannels.js","webpack:///../twitch-ui/dist/pages/Channels/Channels.js","webpack:///../twitch-ui/dist/pages/Channels/index.js"],"names":["__webpack_require__","d","__webpack_exports__","useCategoryGrid","useChannelGrid","_twitch_player_themes_dist_hooks__WEBPACK_IMPORTED_MODULE_6__","_utils__WEBPACK_IMPORTED_MODULE_7__","___WEBPACK_IMPORTED_MODULE_8__","_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","err","_iterableToArrayLimit","TypeError","_nonIterableRest","itemCount","_useTheme2$","layout","typography","dimensions","options","containerWidth","width","containerHeight","height","maxImageWidth","maxCategoryWidth","maxImageHeight","maxCategoryHeight","detailHeight","Math","floor","sizeSecondary","lineHeight","sizeTertiary","gapSmall","spaceSides","gapLarge","gapExtraLarge","spaceBetween","spaceBottom","gapMedium","spaceTop","extendedOptions","getItemLayout","renderItemStyle","_useTheme4$","maxChannelWidth","maxChannelHeight","prop_types__WEBPACK_IMPORTED_MODULE_3__","prop_types__WEBPACK_IMPORTED_MODULE_3___default","n","react__WEBPACK_IMPORTED_MODULE_4__","react__WEBPACK_IMPORTED_MODULE_4___default","react_native_web_dist_exports_FlatList__WEBPACK_IMPORTED_MODULE_5__","_hooks__WEBPACK_IMPORTED_MODULE_6__","GridList","_ref","data","initialNumToRender","numColumns","renderItem","renderHeader","renderFooter","_ref$testID","testID","debug","a","createElement","disableVirtualization","horizontal","legacyImplementation","refreshing","ListHeaderComponent","ListFooterComponent","propTypes","array","isRequired","func","number","any","string","graphql_tag__WEBPACK_IMPORTED_MODULE_1__","graphql_tag__WEBPACK_IMPORTED_MODULE_1___default","_fragments__WEBPACK_IMPORTED_MODULE_2__","_templateObject","strings","raw","slice","freeze","defineProperties","_taggedTemplateLiteral","_twitch_player_data__WEBPACK_IMPORTED_MODULE_0__","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","react_native_web_dist_exports_StyleSheet__WEBPACK_IMPORTED_MODULE_3__","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_4__","_hooks__WEBPACK_IMPORTED_MODULE_5__","_ChannelItem__WEBPACK_IMPORTED_MODULE_6__","_GridList__WEBPACK_IMPORTED_MODULE_7__","ChannelGrid","list","_useChannelGrid","numRows","imageWidth","imageHeight","_ref2","item","index","itemStyle","styles","style","arrayOf","create","display","AllChannels_AllChannels","heading","useGridList","channelCount","clamp","_useQuery","useQuery","TopChannels","suspend","variables","first","error","refetch","extractChannels","utils_channels","channels","react","react_default","Heading","level","RetryButton","onPress","prop_types_default","components_AllChannels_AllChannels","pages_Channels_Channels","t","es"],"mappings":"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","file":"channels.js","sourcesContent":["import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { useTheme } from \"@twitch-player/themes/dist/hooks\";\nimport { getItemDimensions, getGridListItemLayout, getGridListItemStyle, isSmallView } from \"../utils\";\nimport { useDimensions } from \".\";\nexport var useCategoryGrid = function useCategoryGrid(itemCount) {\n  var _useTheme = useTheme(),\n      _useTheme2 = _slicedToArray(_useTheme, 1),\n      _useTheme2$ = _useTheme2[0],\n      layout = _useTheme2$.layout,\n      typography = _useTheme2$.typography;\n\n  var _useDimensions = useDimensions(\"main\"),\n      _useDimensions2 = _slicedToArray(_useDimensions, 1),\n      dimensions = _useDimensions2[0];\n\n  var width = dimensions.width,\n      height = dimensions.height;\n  var options = {\n    itemCount: itemCount,\n    containerWidth: width,\n    containerHeight: height,\n    maxImageWidth: layout.maxCategoryWidth,\n    maxImageHeight: layout.maxCategoryHeight,\n    detailHeight: Math.floor(typography.sizeSecondary * typography.lineHeight) + Math.floor(typography.sizeTertiary * typography.lineHeight) + layout.gapSmall * 2,\n    spaceSides: isSmallView(dimensions) ? layout.gapLarge : layout.gapExtraLarge,\n    spaceBetween: layout.gapSmall,\n    spaceBottom: layout.gapMedium,\n    spaceTop: layout.gapMedium\n  };\n  var itemDimensions = getItemDimensions(options);\n\n  var extendedOptions = _objectSpread({}, options, itemDimensions);\n\n  var getItemLayout = itemCount && getGridListItemLayout(extendedOptions);\n  var renderItemStyle = itemCount && getGridListItemStyle(extendedOptions);\n  return _objectSpread({}, extendedOptions, {\n    getItemLayout: getItemLayout,\n    renderItemStyle: renderItemStyle\n  });\n};\nexport var useChannelGrid = function useChannelGrid(itemCount) {\n  var _useTheme3 = useTheme(),\n      _useTheme4 = _slicedToArray(_useTheme3, 1),\n      _useTheme4$ = _useTheme4[0],\n      layout = _useTheme4$.layout,\n      typography = _useTheme4$.typography;\n\n  var _useDimensions3 = useDimensions(\"main\"),\n      _useDimensions4 = _slicedToArray(_useDimensions3, 1),\n      dimensions = _useDimensions4[0];\n\n  var width = dimensions.width,\n      height = dimensions.height;\n  var options = {\n    itemCount: itemCount,\n    containerWidth: width,\n    containerHeight: height,\n    maxImageWidth: layout.maxChannelWidth,\n    maxImageHeight: layout.maxChannelHeight,\n    detailHeight: Math.floor(typography.sizeSecondary * typography.lineHeight) + Math.floor(typography.sizeTertiary * typography.lineHeight) + Math.floor(typography.sizeTertiary * typography.lineHeight) + layout.gapSmall * 2,\n    spaceSides: isSmallView(dimensions) ? layout.gapLarge : layout.gapExtraLarge,\n    spaceBetween: layout.gapSmall,\n    spaceBottom: layout.gapMedium,\n    spaceTop: layout.gapMedium\n  };\n  var itemDimensions = getItemDimensions(options);\n\n  var extendedOptions = _objectSpread({}, options, itemDimensions);\n\n  var getItemLayout = itemCount && getGridListItemLayout(extendedOptions);\n  var renderItemStyle = itemCount && getGridListItemStyle(extendedOptions);\n  return _objectSpread({}, extendedOptions, {\n    getItemLayout: getItemLayout,\n    renderItemStyle: renderItemStyle\n  });\n};\n//# sourceMappingURL=useGridList.js.map","import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport PropTypes from \"prop-types\";\nimport React, { memo } from \"react\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { useDebug } from \"../../hooks\";\n\nvar GridList = function GridList(_ref) {\n  var data = _ref.data,\n      getItemLayout = _ref.getItemLayout,\n      initialNumToRender = _ref.initialNumToRender,\n      numColumns = _ref.numColumns,\n      renderItem = _ref.renderItem,\n      renderHeader = _ref.renderHeader,\n      renderFooter = _ref.renderFooter,\n      _ref$testID = _ref.testID,\n      testID = _ref$testID === void 0 ? \"grid-list\" : _ref$testID;\n\n  var _useDebug = useDebug(),\n      _useDebug2 = _slicedToArray(_useDebug, 1),\n      debug = _useDebug2[0];\n\n  return React.createElement(FlatList, {\n    data: data,\n    debug: debug,\n    disableVirtualization: false,\n    getItemLayout: getItemLayout,\n    horizontal: false,\n    initialNumToRender: initialNumToRender,\n    legacyImplementation: false,\n    numColumns: numColumns,\n    refreshing: false,\n    renderItem: renderItem,\n    ListHeaderComponent: renderHeader,\n    ListFooterComponent: renderFooter,\n    testID: testID\n  });\n};\n\nGridList.propTypes = {\n  data: PropTypes.array.isRequired,\n  getItemLayout: PropTypes.func,\n  initialNumToRender: PropTypes.number.isRequired,\n  numColumns: PropTypes.number.isRequired,\n  renderItem: PropTypes.func.isRequired,\n  renderHeader: PropTypes.any,\n  renderFooter: PropTypes.any,\n  testID: PropTypes.string\n};\nexport default memo(GridList);\n//# sourceMappingURL=GridList.js.map","import \"core-js/modules/es6.object.freeze\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query TopChannels($first: Int!, $platformType: PlatformType = all) {\\n    channels: streams(first: $first, platformType: $platformType) {\\n      pageInfo {\\n        hasNextPage\\n        hasPreviousPage\\n      }\\n      edges {\\n        cursor\\n        node {\\n          ...Channel\\n        }\\n      }\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport gql from \"graphql-tag\";\nimport { ChannelFragment } from \"../fragments\";\nexport default gql(_templateObject(), ChannelFragment);\n//# sourceMappingURL=TopChannels.js.map","import { ChannelType } from \"@twitch-player/data\";\nimport PropTypes from \"prop-types\";\nimport React, { memo, useCallback } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useChannelGrid } from \"../../hooks\";\nimport ChannelItem from \"../ChannelItem\";\nimport GridList from \"../GridList\";\n\nvar ChannelGrid = function ChannelGrid(_ref) {\n  var list = _ref.list,\n      renderHeader = _ref.renderHeader,\n      renderFooter = _ref.renderFooter,\n      _ref$testID = _ref.testID,\n      testID = _ref$testID === void 0 ? \"channel-grid\" : _ref$testID;\n\n  var _useChannelGrid = useChannelGrid(list.length),\n      numColumns = _useChannelGrid.numColumns,\n      numRows = _useChannelGrid.numRows,\n      imageWidth = _useChannelGrid.imageWidth,\n      imageHeight = _useChannelGrid.imageHeight,\n      getItemLayout = _useChannelGrid.getItemLayout,\n      renderItemStyle = _useChannelGrid.renderItemStyle;\n\n  var renderItem = useCallback(function (_ref2) {\n    var item = _ref2.item,\n        index = _ref2.index;\n    var itemStyle = [styles.item, renderItemStyle(index)];\n    return React.createElement(View, {\n      style: itemStyle\n    }, React.createElement(ChannelItem, {\n      item: item,\n      width: imageWidth,\n      height: imageHeight\n    }));\n  }, [imageWidth, imageHeight]);\n  return React.createElement(GridList, {\n    key: \"\".concat(imageWidth, \"x\").concat(imageHeight),\n    data: list,\n    initialNumToRender: numRows,\n    numColumns: numColumns,\n    getItemLayout: getItemLayout,\n    renderItem: renderItem,\n    renderHeader: renderHeader,\n    renderFooter: renderFooter,\n    testID: testID\n  });\n};\n\nChannelGrid.propTypes = {\n  list: PropTypes.arrayOf(ChannelType).isRequired,\n  renderHeader: PropTypes.any,\n  renderFooter: PropTypes.any,\n  testID: PropTypes.string\n};\nvar styles = StyleSheet.create({\n  item: {\n    display: \"block\"\n  }\n});\nexport default memo(ChannelGrid);\n//# sourceMappingURL=ChannelGrid.js.map","import { TopChannelsQuery, extractChannelsForPlatformType } from \"@twitch-player/data\";\nimport { clamp } from \"@twitch-player/utils\";\nimport PropTypes from \"prop-types\";\nimport React, { memo, useCallback } from \"react\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport ChannelGrid from \"../../components/ChannelGrid\";\nimport Heading from \"../../components/Heading\";\nimport RetryButton from \"../../components/RetryButton\";\nimport { useChannelGrid } from \"../../hooks\";\n\nvar AllChannels = function AllChannels(_ref) {\n  var heading = _ref.heading,\n      _ref$testID = _ref.testID,\n      testID = _ref$testID === void 0 ? \"all-channels\" : _ref$testID;\n\n  var _useChannelGrid = useChannelGrid(),\n      numColumns = _useChannelGrid.numColumns,\n      numRows = _useChannelGrid.numRows;\n\n  var channelCount = clamp(numColumns * (numRows + 1), 10, 40);\n\n  var _useQuery = useQuery(TopChannelsQuery, {\n    suspend: true,\n    variables: {\n      first: channelCount\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      refetch = _useQuery.refetch;\n\n  var extractChannels = extractChannelsForPlatformType(\"all\");\n  var channels = !error ? extractChannels(data) : undefined; // istanbul ignore next\n\n  var renderHeader = useCallback(function () {\n    return React.createElement(Heading, {\n      level: \"2\"\n    }, heading);\n  }, [heading]);\n  return error ? React.createElement(RetryButton, {\n    onPress: refetch\n  }) : React.createElement(ChannelGrid, {\n    list: channels,\n    renderHeader: renderHeader,\n    testID: testID\n  });\n};\n\nAllChannels.propTypes = {\n  heading: PropTypes.string,\n  testID: PropTypes.string\n};\nexport default memo(AllChannels);\n//# sourceMappingURL=AllChannels.js.map","import { useTranslation } from \"@twitch-player/i18n\";\nimport React, { memo } from \"react\";\nimport AllChannels from \"../../components/AllChannels\";\n\nvar Channels = function Channels() {\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  return React.createElement(AllChannels, {\n    heading: t(\"pages.channels.mainHeading\")\n  });\n};\n\nexport default memo(Channels);\n//# sourceMappingURL=Channels.js.map","export { default } from \"./Channels\";\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}